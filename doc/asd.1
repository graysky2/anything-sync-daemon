.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "anything-sync-daemon" "1" "" "" ""
.hy
.SH NAME
.PP
\f[V]anything-sync-daemon\f[R] - Symlinks and syncs user specified dirs
to RAM thus reducing HDD/SDD calls and speeding-up the system.
.SH DESCRIPTION
.PP
\f[V]anything-sync-daemon\f[R] (\f[V]asd\f[R]) is a tiny pseudo-daemon
designed to manage user-specified directories (referred to as \[lq]sync
targets\[rq] from here on out) in tmpfs and to periodically sync them
back to the physical disc (HDD/SSD).
This is accomplished via a bind-mounting step and an innovative use of
\f[V]rsync\f[R] (https://github.com/WayneD/rsync) to maintain
synchronization between a tmpfs copy and media-bound backups.
Additionally, \f[V]asd\f[R] features several crash-recovery features.
.PP
Design goals of \f[V]asd\f[R]:
.IP \[bu] 2
Completely transparent user experience.
.IP \[bu] 2
Reduced wear to physical discs (particularly SSDs).
.IP \[bu] 2
Speed.
.PP
Since sync targets are relocated into tmpfs (RAM disk), the
corresponding onslaught of I/O associated with their use by the system
is redirected from the physical disc to RAM, reducing wear to the
physical disc and improving speed and responsiveness.
.SH SETUP
.PP
\f[V]/etc/asd.conf\f[R] contains all user-managed settings.
The configuration file location can be overridden by specifying a
pathname in the \f[V]ASDCONF\f[R] environment variable.
For instance, to load \f[V]asd\f[R] settings from
\f[V]/here/for/some/reason/lives/asd.conf\f[R]:
.IP
.nf
\f[C]
$ ASDCONF=/here/for/some/reason/lives/asd.conf asd <subcommand>
\f[R]
.fi
.PP
\f[B]Note\f[R] that edits made to \f[V]/etc/asd.conf\f[R] while
\f[V]asd\f[R] is running will be applied only after \f[V]asd\f[R] has
been restarted.
.PP
In the \f[V]asd\f[R] configuration file, you may define the following
variables:
.TP
\f[V]WHATTOSYNC\f[R]
A list (more specifically, a Bash array) defining the sync targets for
\f[V]asd\f[R] to manage.
This variable is \f[B]mandatory\f[R].
If you do not define \f[V]WHATTOSYNC\f[R], or if you set it to the empty
list, \f[V]asd\f[R] will complain and bail out.
.TP
\f[V]VOLATILE\f[R]
A path that lives on a tmpfs or zram mount.
This is where \f[V]asd\f[R] will store the data eventually synchronized
back to the physical disk.
By default, \f[V]asd\f[R] sets \f[V]VOLATILE=/tmp\f[R].
\f[B]Note\f[R] that it is a fatal error to set \f[V]VOLATILE\f[R] to a
path that does not live on a tmpfs or zram mount.
.TP
\f[V]USE_OVERLAYFS\f[R]
A boolean variable controlling whether to use OverlayFS to improve sync
speed even further and use a smaller memory footprint.
\f[B]Note\f[R] that this option requires your kernel to be configured to
use either the \f[V]overlay\f[R] or \f[V]overlayfs\f[R] module.
See the FAQ below for additional details on this feature.
.TP
\f[V]USE_BACKUPS\f[R]
A boolean variable controlling whether to create crash-recovery
snapshots.
.TP
\f[V]BACKUP_LIMIT\f[R]
An unsigned integer defining the number of crash-recovery snapshots to
keep.
.PP
\f[B]Note\f[R] that the default value of \f[V]/tmp\f[R] should work just
fine for the \f[V]VOLATILE\f[R] setting.
If using bleachbit, do NOT invoke it with the
\f[V]--clean system.tmp\f[R] switch or you will remove a key dot file
(\f[V].foo\f[R]) from \f[V]/tmp\f[R] that \f[V]asd\f[R] needs to keep
track of sync status.
Also note that using a value of \f[V]/dev/shm\f[R] can cause problems
with systemd\[cq]s \f[V]NAMESPACE\f[R] spawning only when users enable
the OverlayFS option.
.PP
Example:
.IP
.nf
\f[C]
WHATTOSYNC=(\[aq]/var/lib/monitorix\[aq] \[aq]/srv/http\[aq] \[aq]/foo/bar\[aq])
\f[R]
.fi
.PP
or
.IP
.nf
\f[C]
WHATTOSYNC=(
  \[aq]/var/lib/monitorix\[aq]
  \[aq]/srv/http\[aq]
  \[aq]/foo/bar\[aq]
)
\f[R]
.fi
.SH RUNNING ASD
.SS PREVIEW MODE
.PP
The preview option can be called to show users exactly what
\f[V]asd\f[R] will do/is doing based on the entries in the \f[V]asd\f[R]
configuration file as well as print useful information such as directory
size, paths, and data about any recovery snapshots that have been
created.
.IP
.nf
\f[C]
$ asd p

Anything-sync-daemon on Arch Linux.

Systemd service is currently active.
Systemd resync service is currently active.
OverlayFS v23 is currently active.

Asd will manage the following per /run/asd.conf settings:

owner/group id:     root/0
target to manage:   /srv/http/serve
sync target:        /srv/http/.serve-backup_asd
tmpfs target:       /tmp/asd-root/srv/http/serve
dir size:           21M
overlayfs size:     15M
recovery dirs:      2 <- delete with the c option
 dir path/size:     /srv/http/.serve-backup_asd-crashrecovery-20141105_124948 (17M)
 dir path/size:     /srv/http/.serve-backup_asd-crashrecovery-20150124_062311 (21M)

owner/group id:     facade/100
target to manage:   /home/facade/logs
sync target:        /home/facade/.logs-backup_asd
tmpfs target:       /tmp/asd-facadey/home/facade/logs
dir size:           1.5M
overlayfs size:     480K
recovery dirs:      none
\f[R]
.fi
.SS CLEAN MODE
.PP
The clean mode will delete \f[B]ALL\f[R] recovery snapshots that have
accumulated.
Run this only if you are sure that you want to delete them.
.PP
Note that if a sync target is owned by root or another user, and if you
call \f[V]asd\f[R] to clean, it will throw errors based on the
permissions of your sync targets.
.IP
.nf
\f[C]
$ asd c

Anything-sync-daemon on Arch Linux.

Deleting 2 crashrecovery dirs for sync target /srv/http/serve
 /srv/http/.serve-backup_asd-crashrecovery-20141105_124948
 /srv/http/.serve-backup_asd-crashrecovery-20150124_062311
\f[R]
.fi
.SS START AND STOP ASD FOR SYSTEMD USERS
.PP
Both a systemd service file and timer are provided, and should be used
to start or stop \f[V]asd\f[R].
.PP
The role of the timer is update the tmpfs copies back to the disk.
This occurs once per hour by default.
The timer is started automatically with \f[V]asd.service\f[R].
.IP
.nf
\f[C]
# systemctl [option] asd
\f[R]
.fi
.PP
Available options:
.IP \[bu] 2
\f[V]start\f[R]
.IP \[bu] 2
\f[V]stop\f[R]
.IP \[bu] 2
\f[V]enable\f[R]
.IP \[bu] 2
\f[V]disable\f[R]
.SS START AND STOP ASD FOR USERS OF OTHER INIT SYSTEMS
.PP
For distros not using systemd, another init script should be used to
manage the daemon.
Examples are provided and are known to work with Upstart.
.PP
Note that for these init systems, the supplied cron script (installed to
\f[V]/etc/cron.hourly\f[R]) will run the resync option to keep the tmpfs
copies synchronized.
Of course, the target system must have cron installed and active for
this to happen.
.SH SUPPORTED DISTROS
.PP
At this time, the following distros are officially supported but there
is no reason to think that \f[V]asd\f[R] will not run on another distro:
.IP \[bu] 2
Arch Linux
.SH FAQ
.SS Q1: What is \[lq]OverlayFS mode\[rq]?
.SS A1:
.PP
OverlayFS (https://en.wikipedia.org/wiki/OverlayFS) is a simple union
filesystem mainlined in the Linux kernel version 3.18.0.
Starting with \f[V]asd\f[R] version 5.54, OverlayFS can be used to
reduce the memory footprint of \f[V]asd\f[R]\[cq]s tmpfs space and to
speed up sync and unsync operations.
The magic is in how the overlay mount only writes out data that has
changed rather than writing out the entire sync target.
The same recovery features \f[V]asd\f[R] uses in its default mode are
also active when running in OverlayFS mode.
OverlayFS mode is enabled by setting the \f[V]USE_OVERLAYFS\f[R]
variable to a truthy value (e.g.\ \f[V]USE_OVERLAYFS=1\f[R]) in the
\f[V]asd\f[R] configuration (followed by a restart of the daemon if
\f[V]asd\f[R] is already active).
.PP
There are several versions of OverlayFS available to the Linux kernel in
production in various distros.
Versions 22 and lower have a module called \f[V]overlayfs\f[R] while
newer versions (23 and higher) have a module called \f[V]overlay\f[R]
\[en] note the lack of the \[lq]fs\[rq] in the newer version.
\f[V]asd\f[R] will automatically detect the OverlayFS version available
to your kernel when \f[V]USE_OVERLAYFS\f[R] is enabled.
.PP
See the example in the \[lq]PREVIEW MODE\[rq] section above which shows
a system using OverlayFS to illustrate the memory savings that can be
achieved.
Note the \[lq]overlayfs size\[rq] report compared to the total \[lq]dir
size\[rq] report for each sync target.
Be aware that these numbers will change depending on just how much data
is written to the sync target, but in common use cases, the OverlayFS
size will always be less than the dir size.
.SS Q2: Why do I see the directories \f[V].foo-backup_asd\f[R] and \f[V].foo-backup_asd-old\f[R]?
.SS A2:
.PP
The \f[V]asd\f[R] backup process works by creating a hard-linked clone
of the original directory; this is known as
\f[V].foo-backup_asd-old\f[R].
The other \f[V].foo-backup_asd\f[R] is just a bind mount to the original
directory link which is used to access the contents of the original
directory for overlay purposes.
.SS Q3: My system crashed and \f[V]asd\f[R] didn\[cq]t sync back. What do I do?
.SS A3:
.PP
The \[lq]last good\[rq] backup of your sync targets is just fine still
sitting happily on your filesystem.
Upon restarting \f[V]asd\f[R] (on a reboot for example), a check is
preformed to see if \f[V]asd\f[R] was exited in some corrupted state.
If it is detected, \f[V]asd\f[R] will snapshot the \[lq]last good\[rq]
backup before it rotates it back into place.
Note that, since \f[V]asd\f[R] tries to decrease the disk usage, it
never really \[lq]copies\[rq] the full contents of the directory and
just uses the hardlinks to the previous files.
And during the \f[V]rsync\f[R] step, it creates new files so that the
previous hardlinks are untouched.
So trying to modify the directory during the time \f[V]asd\f[R] is
trying to backup can leave the directory in some corrupted state.
.SS Q4: Where can I find the crash-recovery snapshot?
.SS A4:
.PP
You will find the snapshot in the same directory as the sync target.
It will contain a \f[V]<date>_<time>\f[R] suffix that corresponds to the
time at which the recovery took place.
For example, a \f[V]/foo/bar\f[R] snapshot will have a path like
\f[V]/foo/.bar-backup_asd-crashrecovery-20141221_070112.tar.zstd\f[R]
\[en] of course, the \f[V]<date>_<time>\f[R] suffix will be different
for you.
.SS Q5: How can I restore the crash-recovery snapshot?
.SS A5:
.PP
Follow these steps:
.IP "1." 3
Stop \f[V]asd\f[R].
.IP "2." 3
Confirm that the directories created by \f[V]asd\f[R] are not present.
If they are, \f[V]asd\f[R] did not stop correctly for other reasons.
.IP "3." 3
Move the \[lq]bad\[rq] copy of the sync taget to a backup (don\[cq]t
blindly delete anything).
.IP "4." 3
Untar the snapshot directory to the expected sync target.
.PP
Example using \f[V]/foo/bar\f[R] under systemd:
.IP
.nf
\f[C]
# systemctl stop asd.service
# cd /foo
# mv bar bar-bad
# tar -xvf .bar-backup_asd-crashrecovery-20141221_070112.tar.zstd
\f[R]
.fi
.PP
At this point, check that everything is fine with the data on
\f[V]/foo/bar\f[R].
If all is well, it is safe to delete the snapshot.
.SS Q6: Can \f[V]asd\f[R] delete the snapshots automatically?
.SS A6:
.PP
Yes, run \f[V]asd\f[R] with the \f[V]clean\f[R] switch to delete
snapshots.
See the \[lq]CLEAN MODE\[rq] section for details.
.SH CONTRIBUTE
.PP
Users wishing to contribute to this code should fork and send a pull
request.
Source is freely available on the project page linked below.
.SH BUGS
.PP
Discover a bug?
Please open an issue on the project page linked below.
.SS KNOWN BUGS
.IP \[bu] 2
Currently, \f[V]asd\f[R] cannot handle open files on a sync target, so
if a hung process has something open there, it can be messy.
.SH ONLINE
.IP \[bu] 2
Project page: https://github.com/graysky2/anything-sync-daemon
.IP \[bu] 2
Wiki page: https://wiki.archlinux.org/index.php/Anything-sync-daemon
.SH AUTHOR
.PP
graysky (graysky AT archlinux DOT us)
.SH MAINTAINER
.PP
Manorit Chawdhry (manorit2001\[at]gmail.com)
